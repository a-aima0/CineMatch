<?php

// set the content type to JSON
header('Content-Type: application/json');

$api_key = 'ff024c8b4942e7ebf52baf82685c5249';
$base_url = 'https://api.themoviedb.org/3/';

if ($_SERVER['REQUEST_METHOD'] == 'POST') {
    $input_data = file_get_contents("php://input");
    $quiz_data = json_decode($input_data, true);

    if ($quiz_data === null) {
        echo json_encode(["error" => "Invalid JSON data received."]);
        exit;
    }

    // Extract the quiz data
    $genre = $quiz_data['genre'] ?: '18';
    $weather = $quiz_data['weather'] ?: 'sunny';
    $mood = $quiz_data['mood'] ?: 'happy';
    $company = $quiz_data['company'] ?: 'alone';

    $genre_weight = $quiz_data['genre_weight'];
    $rating_weight = $quiz_data['rating_weight'];
    $recency_weight = $quiz_data['recency_weight'];
    $popularity_weight = $quiz_data['popularity_weight'];
    $keyword_weight = $quiz_data['keyword_weight'];
    $collaborative_weight = $quiz_data['collaborative_weight'];


    $genre_ids = [
        'action' => 28,
        'comedy' => 35,
        'drama' => 18,
        'romance' => 10749,
        'thriller' => 53,
        'horror' => 27,
    ];


    // URL to fetch movies based on genre
    $genre_id = isset($genre_ids[strtolower($genre)]) ? $genre_ids[strtolower($genre)] : 28; // Default to action genre if not found
    $url = $base_url . 'discover/movie?api_key=' . $api_key . '&with_genres=' . $genre_id . '&language=en-US&include_adult=false&page=1';

    $url .= "&sort_by=vote_average.desc";

    $minVoteCount = 400;
    $url .= "&vote_count.gte=$minVoteCount";

    $url .= "&vote_average.gte=6.5";


    $response = file_get_contents($url);


    if ($response === false) {
        echo json_encode(["error" => "Error fetching data from TMDb."]);
        exit;
    }

    $movie_data = json_decode($response, true);

    if (isset($movie_data['results']) && count($movie_data['results']) > 0) {
        $movies = [];
        foreach ($movie_data['results'] as $movie) {
            $movies[] = [
                'title' => $movie['title'],
                'overview' => $movie['overview'],
                'release_date' => $movie['release_date'],
                'poster_path' => 'https://image.tmdb.org/t/p/w500' . $movie['poster_path'],
                'vote_average' => $movie['vote_average'],
            ];
        }

        // return the list of recommended movies as JSON
        echo json_encode(["results" => $movies]);
    } else {
        echo json_encode(["results" => [], "message" => "No recommendations found."]);
    }
} else {
    echo json_encode(["error" => "Invalid request method. Please send a POST request."]);
}
?>









<?php
header("Content-Type: application/json");
error_reporting(E_ALL);
ini_set("display_errors", 1);

$tmdb_api_key = "ff024c8b4942e7ebf52baf82685c5249";

// Read JSON input
$input = json_decode(file_get_contents("php://input"), true);
if (!$input) {
    die(json_encode(["error" => "Invalid JSON payload"]));
}

// Extract user input
$genre = $input["genre"] ?? "";
$weather = $input["weather"] ?? "";
$mood = $input["mood"] ?? "";
$company = $input["company"] ?? "";
$weights = $input["weights"] ?? [];

$weights = [
    "genre" => (float) $weights["genre"],
    "rating" => (float) $weights["rating"],
    "recency" => (float) $weights["recency"],
    "popularity" => (float) $weights["popularity"],
    "keywords" => (float) $weights["keywords"],
    "collaborative" => (float) $weights["collaborative"]
];

// Validate genre ID
if (empty($genre)) {
    die(json_encode(["error" => "Invalid genre selection"]));
}

// Call TMDB API
$tmdb_url = "https://api.themoviedb.org/3/discover/movie?api_key=$tmdb_api_key&with_genres=$genre&sort_by=popularity.desc";
$response = file_get_contents($tmdb_url);

if (!$response) {
    die(json_encode(["error" => "TMDB API request failed"]));
}

$movies_data = json_decode($response, true);
if (empty($movies_data["results"])) {
    die(json_encode(["error" => "No movies found for genre ID $genre"]));
}

// Apply weighted filtering (basic sorting by popularity for now)
$movies = array_map(function($movie) use ($weights) {
    return [
        "title" => $movie["title"],
        "release_date" => $movie["release_date"],
        "popularity" => $movie["popularity"] * $weights["popularity"]
    ];
}, $movies_data["results"]);

// Sort movies based on weighted popularity
usort($movies, function($a, $b) {
    return $b["popularity"] <=> $a["popularity"];
});

// Return top 10 recommendations
echo json_encode(["movies" => array_slice($movies, 0, 10)]);
?>















//header("Content-Type: application/json");
//error_reporting(E_ALL);
//ini_set("display_errors", 1);
//
//$tmdb_api_key = "ff024c8b4942e7ebf52baf82685c5249";
//
//// Read JSON input
//$input = json_decode(file_get_contents("php://input"), true);
//if (!$input) {
//    die(json_encode(["error" => "Invalid JSON payload"]));
//}
//
//// Extract user input
//$genre = $input["genre"] ?? "";
//$weather = $input["weather"] ?? "";
//$mood = $input["mood"] ?? "";
//$company = $input["company"] ?? "";
//$weights = $input["weights"] ?? [];
//
//// Convert weights to float values
//$weights = [
//    "genre" => isset($weights["genre"]) ? (float)$weights["genre"] : 0.5,
//    "rating" => isset($weights["rating"]) ? (float)$weights["rating"] : 0.5,
//    "recency" => isset($weights["recency"]) ? (float)$weights["recency"] : 0.5,
//    "popularity" => isset($weights["popularity"]) ? (float)$weights["popularity"] : 0.5,
//    "keywords" => isset($weights["keywords"]) ? (float)$weights["keywords"] : 0.5,
//    "collaborative" => isset($weights["collaborative"]) ? (float)$weights["collaborative"] : 0.5
//];
//
//// Validate genre ID
//if (empty($genre)) {
//    die(json_encode(["error" => "Invalid genre selection"]));
//}
//
//// Fetch movies from TMDB API
//$tmdb_url = "https://api.themoviedb.org/3/discover/movie?api_key=$tmdb_api_key&with_genres=$genre&sort_by=popularity.desc";
//$response = file_get_contents($tmdb_url);
//
//if (!$response) {
//    die(json_encode(["error" => "TMDB API request failed"]));
//}
//
//$movies_data = json_decode($response, true);
//if (empty($movies_data["results"])) {
//    die(json_encode(["error" => "No movies found for genre ID $genre"]));
//}
//
//// Dummy data for keyword-based matching (replace with a proper dataset)
//$keyword_map = [
//    "sunny" => ["adventure", "light-hearted", "feel-good"],
//    "rainy" => ["mystery", "thriller", "drama"],
//    "snowy" => ["fantasy", "holiday", "animation"],
//    "happy" => ["comedy", "family", "romance"],
//    "sad" => ["drama", "biopic", "historical"],
//    "excited" => ["action", "thriller", "sci-fi"],
//    "alone" => ["psychological", "indie", "mystery"],
//    "friends" => ["comedy", "action", "horror"],
//    "family" => ["animation", "adventure", "fantasy"]
//];
//
//// Compute movie scores
//$movies = [];
//foreach ($movies_data["results"] as $movie) {
//    $score = 0;
//
//    // Weighted scoring
//    $score += $weights["genre"] * (isset($movie["genre_ids"]) && in_array($genre, $movie["genre_ids"]) ? 1 : 0);
//    $score += $weights["rating"] * ($movie["vote_average"] / 10);
//    $score += $weights["recency"] * (1 / (2025 - (int)substr($movie["release_date"], 0, 4) + 1));
//    $score += $weights["popularity"] * ($movie["popularity"] / 1000);
//
//    // Check keyword-based matching
//    $matched_keywords = 0;
//    if (!empty($keyword_map[$weather])) {
//        foreach ($keyword_map[$weather] as $kw) {
//            if (stripos($movie["overview"], $kw) !== false) {
//                $matched_keywords++;
//            }
//        }
//    }
//    if (!empty($keyword_map[$mood])) {
//        foreach ($keyword_map[$mood] as $kw) {
//            if (stripos($movie["overview"], $kw) !== false) {
//                $matched_keywords++;
//            }
//        }
//    }
//    if (!empty($keyword_map[$company])) {
//        foreach ($keyword_map[$company] as $kw) {
//            if (stripos($movie["overview"], $kw) !== false) {
//                $matched_keywords++;
//            }
//        }
//    }
//
//    $score += $weights["keywords"] * ($matched_keywords / 3);
//
//    // Store movie with score
//    $movies[] = [
//        "title" => $movie["title"],
//        "release_date" => $movie["release_date"],
//        "score" => $score
//    ];
//}
//
//// Sort movies by score (higher is better)
//usort($movies, function ($a, $b) {
//    return $b["score"] <=> $a["score"];
//});
//
//// Return top 10 recommendations
//echo json_encode(["movies" => array_slice($movies, 0, 10)]);
//






<?php
header("Content-Type: application/json");
error_reporting(E_ALL);
ini_set("display_errors", 1);

$tmdb_api_key = "ff024c8b4942e7ebf52baf82685c5249";

// Read JSON input
$input = json_decode(file_get_contents("php://input"), true);
if (!$input) {
    die(json_encode(["error" => "Invalid JSON payload"]));
}

// Extract user input
$genre = $input["genre"] ?? "";
$weather = $input["weather"] ?? "";
$mood = $input["mood"] ?? "";
$company = $input["company"] ?? "";
$weights = $input["weights"] ?? [];

// Convert weights to float values
$weights = [
    "genre" => isset($weights["genre"]) ? (float)$weights["genre"] : 0.5,
    "rating" => isset($weights["rating"]) ? (float)$weights["rating"] : 0.5,
    "recency" => isset($weights["recency"]) ? (float)$weights["recency"] : 0.5,
    "popularity" => isset($weights["popularity"]) ? (float)$weights["popularity"] : 0.5,
    "keywords" => isset($weights["keywords"]) ? (float)$weights["keywords"] : 0.5,
    "collaborative" => isset($weights["collaborative"]) ? (float)$weights["collaborative"] : 0.5
];

// Validate genre ID
if (empty($genre)) {
    die(json_encode(["error" => "Invalid genre selection"]));
}

// Fetch multiple pages from TMDB API
$movies_data = [];
for ($page = 1; $page <= 3; $page++) {  // Fetch from 3 pages
    $tmdb_url = "https://api.themoviedb.org/3/discover/movie?api_key=$tmdb_api_key&with_genres=$genre&sort_by=vote_count.desc&page=$page";
    $response = file_get_contents($tmdb_url);
    if ($response) {
        $data = json_decode($response, true);
        if (!empty($data["results"])) {
            $movies_data = array_merge($movies_data, $data["results"]);
        }
    }
}

if (empty($movies_data)) {
    die(json_encode(["error" => "No movies found for genre ID $genre"]));
}

// Shuffle movies to add diversity
shuffle($movies_data);

// Dummy data for keyword-based matching (replace with a proper dataset)
$keyword_map = [
    "sunny" => ["adventure", "light-hearted", "feel-good"],
    "rainy" => ["mystery", "thriller", "drama"],
    "snowy" => ["fantasy", "holiday", "animation"],
    "happy" => ["comedy", "family", "romance"],
    "sad" => ["drama", "biopic", "historical"],
    "excited" => ["action", "thriller", "sci-fi"],
    "alone" => ["psychological", "indie", "mystery"],
    "friends" => ["comedy", "action", "horror"],
    "family" => ["animation", "adventure", "fantasy"]
];

// Compute movie scores
$movies = [];
foreach ($movies_data as $movie) {
    $score = 0;

    // Weighted scoring
    $score += $weights["genre"] * (isset($movie["genre_ids"]) && in_array($genre, $movie["genre_ids"]) ? 1 : 0);
    $score += $weights["rating"] * ($movie["vote_average"] / 10);
    $score += $weights["recency"] * (1 / (2025 - (int)substr($movie["release_date"], 0, 4) + 1));
    $score += $weights["popularity"] * ($movie["popularity"] / 1000);

    // Keyword matching
    $matched_keywords = 0;
    if (!empty($keyword_map[$weather])) {
        foreach ($keyword_map[$weather] as $kw) {
            if (stripos($movie["overview"], $kw) !== false) {
                $matched_keywords++;
            }
        }
    }
    if (!empty($keyword_map[$mood])) {
        foreach ($keyword_map[$mood] as $kw) {
            if (stripos($movie["overview"], $kw) !== false) {
                $matched_keywords++;
            }
        }
    }
    if (!empty($keyword_map[$company])) {
        foreach ($keyword_map[$company] as $kw) {
            if (stripos($movie["overview"], $kw) !== false) {
                $matched_keywords++;
            }
        }
    }
    $score += $weights["keywords"] * ($matched_keywords / 3);

    // Store movie with score
    $movies[] = [
        "title" => $movie["title"],
        "release_date" => $movie["release_date"],
        "score" => $score
    ];
}

// Sort movies by score
usort($movies, function ($a, $b) {
    return $b["score"] <=> $a["score"];
});

// Return top 10 recommendations
echo json_encode(["movies" => array_slice($movies, 0, 10)]);
?>








